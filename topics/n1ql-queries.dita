<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE concept PUBLIC "-//OASIS//DTD DITA Concept//EN" "concept.dtd">
<concept id="concept_bhv_nhq_44">
 <title>Working with N1QL
      Queries</title>
 <shortdesc>Pronounced “nickel”, N1Ql is Couchbase’s next generation language for querying JSON
    documents. Similar in syntax to traditional SQL found in all relational databases, N1QL is an
    extended non-first normal form variation which allows you to query nested structures commonly
    found within the document domain. SDK support for N1QL can be found at two different levels: low
    level support for ad-hoc N1QL queries and at a higher level abstraction as a LINQ provider
    (currently in development). </shortdesc>
 <conbody>
   <p>At the time of writing, N1QL is available as Developer Preview 3 (DP3). To use the developer
      preview with the SDK, you will need to download and install the N1QL DP3 which can be found
        <xref href="http://www.couchbase.com/communities/n1ql" format="html" scope="external"
        >here</xref>. Once you have downloaded and extracted DP3, follow the directions to start the
      tutorial; the client currently only works with the tutorial running on <codeph>localhost:8093</codeph></p>
   <p>For running ad-hoc N1QL queries, the client has a single method which takes a string that must be a valid N1QL query. Here is an example of executing a simple query using the SDK:
   </p>
   <codeblock outputclass="language-csharp">
 const string query = "SELECT c FROM tutorial as c";
 var result = bucket.Query&lt;dynamic>(query);
 foreach (var row in result.Rows)
 {
     Console.WriteLine(row);
 }
   </codeblock>
   <p>Here we create a query which targets the tutorial bucket, aliases it as “c” and returns all of the “children” elements from the documents in that bucket. Then we execute the query using the <apiname>IBucket.Query(...)</apiname> method, typing it as a CLR dynamic type. The result of the query is then iterated over and displayed to stdout.</p>
   <p>Note the return type of the <apiname>IBucket.Query</apiname> method is an object implementing the the <apiname>IQueryResult&lt;T></apiname> interface:
   </p>
    <p>
        <table id="table_c5m_svd_3p">
          <tgroup cols="2">
            <colspec colnum="1" colname="col1"/>
            <colspec colnum="2" colname="col2"/>
            <thead>
              <row>
                <entry >Name</entry>
                <entry >Description</entry>
              </row>
            </thead>
            <tbody>
             
              <row>
                <entry >Error</entry>
                <entry >The error message returned by the N1QL engine</entry>
              </row>
              <row>
                <entry >Rows</entry>
                <entry >A List&lt;T&gt; of T, which is the result of the query</entry>
              </row>
              <row>
                <entry >Success</entry>
                <entry >true if the query completed successfully</entry>
              </row>
              
            </tbody>
          </tgroup>
        </table>
      </p>
   
 </conbody>
</concept>
