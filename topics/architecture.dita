<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE concept PUBLIC "-//OASIS//DTD DITA Concept//EN" "concept.dtd">
<concept id="concept_vbb_dq2_54">
	<title>Architecture</title>
	<shortdesc>Couchnode has a multilayer architecture.</shortdesc>
	<conbody>
		<p>To debug errors, you must be familiar with the Couchnode architecture to understand where
			problems might originate. The following components participate in typical operations: </p>

		<ul>
			<li><p><b>Couchbase Server</b></p>
				<p>This is the server itself, which stores your data. Errors can happen here if your data does
					not exist, or if there are connectivity issues with one or more nodes in the server.
					While Couchbase Server is scalable and fault tolerant, there are naturally some
					conditions that cause failures (for example, if all nodes are unreachable).</p></li>

			<li><p><b>libcouchbase</b></p>
				<p>libcouchbase, our C client library, provides the underlying layer that handles network communication and protocol handling
					between a client and a Couchbase node. Network connectivity issues tend to happen
					here.</p></li>

			<li><p><b>Node.js C++ binding layer</b></p>
				<p>The binding layer contains the C++ code that provides the bulk of the SDK. It interfaces with
					the libcouchbase component, handles marshaling of information between libcouchbase
					and your application, performs input validation, and encoding and decoding of keys
					and values.</p>
			</li>
			<li><p><b>Node.js layer</b></p>
				<p>The Node.js layer is written in pure JavaScript. Simple key-value operations are normally
					just dispatched to the C++ layer. Most of the view operations are handled here as
					well, with the C++ binding layer just performing the lower-level network
					handling.</p></li>
		</ul>


	</conbody>
</concept>
