<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE concept
  PUBLIC "-//OASIS//DTD DITA Concept//EN" "concept.dtd">
<concept xml:lang="en-us" id="concept2677">
	<title>Hello Couchbase!</title>
	<conbody>
		<p>Once you have used one of the three methods outlined above to reference the Couchbase .NET SDK in your Visual Studio Project, it’s time to write some code! In this section we will go over creating a simple “Hello World” application using the SDK. At this point it’s expected that you have read the sections on referencing the SDK and you are comfortable creating a Visual Studio Project that consumes it. If not, please re-read the sections above starting with “Getting Started”.</p>
		<section><title>Pre-requisites</title>
			<p>In order to complete the “Hello World” tutorial, you’ll need the following prerequisites installed:
			</p>
			<p>
				<ul>
					<li>Microsoft Visual 2012 or later</li>
					<li>Microsoft .NET Framework 4.5 or later</li>
					<li>Couchbase Server 2.5 or greater installed locally (localhost/127.0.0.1)</li>
					<li>A Couchbase bucket called “default” installed</li>
				</ul>
			</p>
			<p>Before continuing, make sure you have prerequisites above satisfied.</p>
		</section>
		<section><title>Tutorial</title>
			<p>In this tutorial, we will create a simple console application using Visual Studio
				that illustrates the most basic usage and example of the Couchbase .NET SDK.
				</p><p>To begin, open Visual Studio and create a new Console Application Project,
				called Couchbase.HelloCouchbase: </p>
			<p>
				<image href="../images/hello-couchbase-visual-studio.png" id="image_i31_yqb_3p"/>
			</p>
			<p>This will create a simple executable with a main() method that we can use to
				illustrate reading and writing from a Couchbase Cluster.</p><p>Once you have done
				this, will use the Nuget Package Manager to reference the Couchbase .NET SDK and
				it’s dependencies: </p>
			<p/>
			<image href="../images/hello-couchbase-nuget.png" id="image_rmn_hsb_3p"/>
			<p>At this point, you should be ready to go. Let’s add a CouchbaseCluster object, which
				represents a factory and resource manager for Couchbase Buckets. This will be added
				to the Program.cs file that was added automatically by Visual Studio when the
				project was created:</p>
			<codeblock outputclass="language-csharp" spectitle="Creating the Cluster and Bucket">
internal class Program
{
    private static readonly CouchbaseCluster Cluster = new CouchbaseCluster();

    private static void Main(string[] args)
    {
        using (var bucket = Cluster.OpenBucket())
        {
            
        }
    }
}
			</codeblock>
			<p>The default OpenBucket() overload with no parameters, will open the “default” bucket.
				Additionally, since we chose to use the default constructor when we created the
				CouchbaseCluster object, the cluster/server we will be using will be our localhost
				(127.0.0.1) instance of Couchbase. Later on, we will show how to use configuration
				to connect to remote clusters and take advantage of other configuration options.</p>
			<p>Note that the CouchbaseBucket object (as well as the CouchbaseCluster object)
				implement the Dispose Pattern, because of this we are wrapping the instance in a
				using statement which means that the internal resources allocated by the instance
				will be reclaimed as the bucket instance goes out of scope. Managing the lifetime or
				“scope” of these objects is critical to developing high-performing, robust
				applications with the .NET SDK. In a later section we will go over this in
				detail.</p>
			<p> Now that we have connected to a Couchbase bucket, let’s create a document and add it
				to the database: </p>
			<p>
				<codeblock outputclass="language-csharp" spectitle="Storing a document">
using (var bucket = Cluster.OpenBucket())
{
    var document = new Document&lt;dynamic&gt;
    {
        Id = "Hello",
        Content = new
        {
            Name = "Couchbase"
        }
    };

    var upsert = bucket.Upsert(document);
    if (upsert.Success)
    {
        var get = bucket.GetDocument&lt;dynamic&gt;(document.Id);
        document = get.Document;
        var msg = string.Format("{0} {1}!", document.Id, document.Content.Name);
        Console.WriteLine(msg);
    }
    Console.Read();
}
			</codeblock>
			</p>
			<p>First, we are creating a new Document object, typing it as “dynamic” and providing an
				Id value. Then, we are creating the actual value that will be stored as JSON in
				Couchbase and assigning it to the Content property. Once we have created the
				Document object, we use the Upsert(..) method to store it into the database.
				Finally, we check whether or not the operation was succesful and if it is, do
				GetDocument(...) operation to retrieve the document and format a string with the Id
				of the document and the Name property from the Content field (the actual JSON
				document).</p><p>If you build and run this from Visual Studio, you should see the
				following prompt:</p>
			<p>
				<codeblock outputclass="language-bourne">Hello Couchbase!</codeblock>
			</p>
			<p>Congratulations, you have successfully create the Hello Couchbase Tutorial! Note,
				that the full source can be found on <xref
					href="https://github.com/couchbaselabs/couchbase-net-examples/tree/master/Src/Couchbase.HelloCouchbase"
					format="html" scope="external">Github</xref>.</p>
		</section>
	</conbody>
</concept>
