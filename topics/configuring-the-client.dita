<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE concept PUBLIC "-//OASIS//DTD DITA Concept//EN" "concept.dtd">
<concept id="concept_g2m_5nk_3p">
 <title>Configuring the client</title>
 <shortdesc>While the client comes with reasonable default configuration settings, sometimes you
  need to customize the configuration for your unique environment or use case.</shortdesc>
 <conbody>
  <section>
   <title>Programmatic configuration</title>
  <p>The client comes with a set of default values for its configuration. For the most part, these
				defaults are satisfactory for most development and production use, however, these values
				can be modified or overridden as needed to tune the client to specific use-cases and
				scenarios. The client can be configured in one of two ways: programmatically through the
					<codeph>ClientConfiguration</codeph> object or through the
					<codeph>App.Config</codeph> or <codeph>Web.Config</codeph>. </p>
  <p><b>The ClientConfiguration object</b></p>
  <p>The client can be configured programmatically using the <apiname>ClientConfiguration</apiname> class and passing the custom configuration through one of the <apiname>CouchbaseCluster</apiname> constructor overloads. Through the <apiname>ClientConfiguration</apiname> you can also 
   configure individual buckets and their connection pools. </p>
  <p>Here is an example of overriding the default configuration settings with several overrides: </p>
  <p><codeblock outputclass="language-csharp" spectitle="ClientConfiguration example">
var config = new ClientConfiguration
{
  Servers = new List&lt;Uri&gt;
  {
    new Uri("http://192.168.56.101:8091/pools"),
    new Uri("http://192.168.56.102:8091/pools"),
    new Uri("http://192.168.56.103:8091/pools"),
    new Uri("http://192.168.56.104:8091/pools"),
  },
  UseSsl = true,
  BucketConfigs = new Dictionary&lt;string, BucketConfiguration&gt;
  {
    {"default", new BucketConfiguration
    {
      BucketName = "default",
      UseSsl = false,
      Password = "",
      PoolConfiguration = new PoolConfiguration
      {
        MaxSize = 10,
        MinSize = 5
      }
    }}
  }
};

using (var cluster = new CouchbaseCluster(config))
{
  IBucket bucket = null;
  try
  {
    bucket = cluster.OpenBucket();
    //use the bucket here
  }
  finally
  {
    if (bucket != null)
    {
      cluster.CloseBucket(bucket);
    }
   }
  }
}
		</codeblock></p>
  <p>At the top of the snippet, the code creates the <apiname>ClientConfiguration</apiname> object
				and uses property initializers to override the default settings. It then creates the
				bootstrap list of servers for initiating communication between the client and the
				cluster. The client attempts to bootstrap off of each of these servers. When it
				successfully connects with one of the servers in this list, the bootstrapping process
				ends. </p>
  <p>Why add more than one server to the bootstrap (Servers) list? It’s possible that one or more of
				the servers in that list might not be part of the cluster at the time the client is
				created. By providing a range of nodes as bootstrap candidates, the likelihood of the
				client finding a suitable node to connect to increases. After the client successfully
				bootstraps, it receives a server configuration of the current state of the cluster. It
				uses this server configuration to update the bootstrap list by adding any additional
				candidate bootstrap servers to it.</p>
  <p>Here are all of the <apiname>ClientConfiguration</apiname> members and their defaults:</p>
  <table id="table_ivc_5mc_3p">
   <title>ClientConfiguration properties</title>
   <tgroup cols="3">
    <colspec colnum="1" colname="col1" colwidth="1*"/>
    <colspec colnum="2" colname="col2" colwidth="3.34*"/>
    <colspec colnum="3" colname="col3" colwidth="1.21*"/>
    <thead>
     <row>
      <entry>Name</entry>
      <entry>Description</entry>
      <entry>Default</entry>
     </row>
    </thead>
    <tbody>
     <row>
      <entry><codeph>UseSsl</codeph></entry>
      <entry>Whether or not to use SSL encrypt data being sent to and from the server</entry>
      <entry>false</entry>
     </row>
     <row>
      <entry><codeph>SslPort</codeph></entry>
      <entry>Overrides the DirectPort and sets the SSL port to use for
       Key/Value operations using the Binary Memcached protocol id UseSsl
       is enabled</entry>
      <entry>11207</entry>
     </row>
     <row>
      <entry><codeph>ApiPort</codeph></entry>
      <entry>The port to use for the Views API</entry>
      <entry>8092</entry>
     </row>
     <row>
      <entry><codeph>DirectPort</codeph></entry>
      <entry>The port to use for standard memcached binary operations such as storing and retrieving
								documents by key</entry>
      <entry>11210</entry>
     </row>
     <row>
      <entry><codeph>MgmtPort</codeph></entry>
      <entry>The port to use for the Management API</entry>
      <entry>8091</entry>
     </row>
     <row>
      <entry><codeph>HttpsMgmtPort</codeph></entry>
      <entry>Overrides the <codeph>MgmtPort</codeph> and sets the SSL port to use for the Management
								API</entry>
      <entry>18091</entry>
     </row>
     <row>
      <entry><codeph>HttpsApiPort</codeph></entry>
      <entry>Overrides the <codeph>ApiPort</codeph> and sets the SSL port to use for the Views
								API</entry>
      <entry>18092</entry>
     </row>
     <row>
      <entry><codeph>OperationTimeout</codeph></entry>
      <entry>The amount of time the client will wait on a pending operation
       before timing out.</entry>
      <entry>2500 ms</entry>
     </row>
     <row>
      <entry><codeph>ObserveInterval</codeph></entry>
      <entry>The interval to wait before each Observe attempt</entry>
      <entry>10 ms</entry>
     </row>
     <row>
      <entry><codeph>ObserveTimeout</codeph></entry>
      <entry>The maximum amount of time to wait before timing out</entry>
      <entry>500 ms</entry>
     </row>
     <row>
      <entry><codeph>Servers</codeph></entry>
      <entry>The list of servers to bootstrap from</entry>
      <entry>http://localhost:8091/pools</entry>
     </row>
    </tbody>
   </tgroup>
  </table>
  <p>In the ClientConfiguration example code snippet, the <codeph>UseSsl</codeph> property is set to
				true, indicating that all traffic between the client and the cluster will be encrypted.
				To use this feature, the server hosting the application  needs to have the appropriate
				certificate installed and the cluster must be Couchbase Server version 3.0 or later. For
				more detail, please see: [link to installing certs].</p>
  <p>In the example above, we are specifying a configuration for the “default” bucket. Providing a
				bucket level configuration will override any configuration settings set at the cluster
				level. The <codeph>BucketConifguration</codeph> members and their defaults are as
				follows:</p>
  <p>
   <table id="table_ww5_t4c_3p">
    <title>BucketConfiguraton properties</title>
    <tgroup cols="3">
     <colspec colnum="1" colname="col1" colwidth="1*"/>
     <colspec colnum="2" colname="col2" colwidth="3.34*"/>
     <colspec colnum="3" colname="col3" colwidth="1.21*"/>
     <thead>
      <row>
       <entry>Name</entry>
       <entry>Description</entry>
       <entry>Default</entry>
      </row>
     </thead>
     <tbody>
      
      <row>
       <entry><codeph>BucketName</codeph></entry>
       <entry>The name of the bucket to connect to.</entry>
       <entry>“default”</entry>
      </row>
      <row>
       <entry><codeph>UseSsl</codeph></entry>
       <entry>Whether or not to use SSL encrypt data being
        sent to and from the server</entry>
       <entry>false</entry>
      </row>
      <row>
       <entry><codeph>Password</codeph></entry>
       <entry>The bucket password</entry>
       <entry>empty string</entry>
      </row>
      <row>
       <entry><codeph>ObserveInterval</codeph></entry>
       <entry>The interval to wait before each Observe
        attempt</entry>
       <entry>10ms</entry>
      </row>
      <row>
       <entry><codeph>ObserverTimeout</codeph></entry>
       <entry>The max amount of time to wait before timing
        out</entry>
       <entry>500ms</entry>
      </row>
      <row>
       <entry><codeph>PoolConfiguration</codeph></entry>
       <entry>The TCP socket pool configuration</entry>
       <entry>(see below)</entry>
      </row>
     </tbody>
    </tgroup>
   </table>
  </p>
  <p>Finally, in the ClientConfiguration example code snippet, it provides a new
					<codeph>PoolConfiguration</codeph>, which overrides the default
					<codeph>MaxSize</codeph> and <codeph>MinSize</codeph> of 2 and 1 respectively, with
				the values 5 and 2. This means that the pool will start with 2 TCP connections and grow
				to 5 TCP connections on demand. </p>
  <p>The rest of the <codeph>PoolConfiguration</codeph> members and their defaults: </p>
  <table id="table_nny_z4c_3p">
   <title>PoolConfiguration properties</title>
   <tgroup cols="3">
    <colspec colnum="1" colname="col1"/>
    <colspec colnum="2" colname="col2"/>
    <colspec colnum="3" colname="col3"/>
    <thead>
     <row>
      <entry dir="ltr">Name</entry>
      <entry dir="ltr">Description</entry>
      <entry dir="ltr">Default</entry>
     </row>
    </thead>
    <tbody>
     
     <row>
      <entry dir="ltr"><codeph>MaxSize</codeph></entry>
      <entry dir="ltr">The maximum number of TCP connection to use</entry>
      <entry dir="ltr">2</entry>
     </row>
     <row>
      <entry dir="ltr"><codeph>MinSize</codeph></entry>
      <entry dir="ltr">The minimum or starting number of TCP
       connections to use</entry>
      <entry dir="ltr">1</entry>
     </row>
     <row>
      <entry dir="ltr"><codeph>WaitTimeout</codeph></entry>
      <entry dir="ltr">The amount of time to wait for a TCP connection before timing out after the
									<codeph>MaxSize</codeph> has been reached and all connections are being
								used</entry>
      <entry dir="ltr">2500 ms</entry>
     </row>
     <row>
      <entry dir="ltr"><codeph>ShutdownTimeout</codeph></entry>
      <entry dir="ltr">The amount of time to wait  before the underlying socket closes its
								connection</entry>
      <entry dir="ltr">10000 ms</entry>
     </row>
     <row>
      <entry dir="ltr"><codeph>UseSsl</codeph></entry>
      <entry dir="ltr">Whether or not to use SSL encrypt data being
       sent to and from the server</entry>
      <entry dir="ltr">false</entry>
     </row>
    </tbody>
   </tgroup>
  </table>
  <p>The example source can be found on GitHub <xref
					href="https://github.com/couchbaselabs/couchbase-net-examples/blob/master/Src/Couchbase.ClientConfigurationExample/Program.cs"
					format="html" scope="external">here</xref>.</p>
  </section> 
  <section>
   <title>Configuration with an App.Config or Web.Config</title>
   <p>As an alternative to using programmatic configuration, you can also configure the client
				through an App.config or Web.config. The following snippet illustrates how you would do
				so:</p>
   <codeblock outputclass="language-xml">
&lt;?xml version="1.0" encoding="utf-8" ?&gt;
&lt;configuration&gt;
  &lt;configSections&gt;
    &lt;sectionGroup name="couchbaseClients"&gt;
      &lt;section name="couchbase"
               type="Couchbase.Configuration.Client.Providers.CouchbaseClientSection, Couchbase"/&gt;
    &lt;/sectionGroup&gt;
  &lt;/configSections&gt;
  &lt;couchbaseClients&gt;
    &lt;couchbase useSsl="false"&gt;
      &lt;servers&gt;
        &lt;add uri="http://192.168.56.101:8091/pools"&gt;&lt;/add&gt;
        &lt;add uri="http://192.168.56.102:8091/pools"&gt;&lt;/add&gt;
        &lt;add uri="http://192.168.56.103:8091/pools"&gt;&lt;/add&gt;
        &lt;add uri="http://192.168.56.104:8091/pools"&gt;&lt;/add&gt;
      &lt;/servers&gt;
      &lt;buckets&gt;
        &lt;add name="default" useSsl="false" password=""&gt;
          &lt;connectionPool name="custom" maxSize="10" minSize="5"&gt;&lt;/connectionPool&gt;
        &lt;/add&gt;
      &lt;/buckets&gt;
    &lt;/couchbase&gt;
  &lt;/couchbaseClients&gt;
    &lt;startup&gt; 
        &lt;supportedRuntime version="v4.0" sku=".NETFramework,Version=v4.5.1" /&gt;
    &lt;/startup&gt;
&lt;/configuration&gt;
		</codeblock>
   <p>This the same configuration programmatically defined earlier in this section using the
					<codeph>ClientConfiguration</codeph> class.</p>
   <p>To use this configuration, you need to use one of the special
					<codeph>CouchbaseCluster</codeph> constructors that takes a string containing the
				path of the configuration:</p>
   <p>
    <codeblock outputclass="language-csharp">
using (var cluster = new CouchbaseCluster("couchbaseClients/couchbase"))
{
  using (var bucket = cluster.OpenBucket())
  {
    //use the bucket here
  }
}
			</codeblock>
   </p>
   <p>That the string <codeph>couchbaseClients/couchbase</codeph> matches the path of the
					<codeph>sectionGroup</codeph> and <codeph>section</codeph> elements in the App.config
				defined above. This example can be found on Github <xref
					href="https://github.com/couchbaselabs/couchbase-net-examples/tree/master/Src/Couchbase.ClientConfigurationExample.WebConfig"
					format="html" scope="external">here.</xref>
			</p>
  </section>
 </conbody>
</concept>
