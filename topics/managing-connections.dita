<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE concept PUBLIC "-//OASIS//DTD DITA Concept//EN" "concept.dtd">
<concept id="concept_ppz_lhq_44">
 <title>Managing Server Connections </title>
	<shortdesc>TCP connections are a
		finite resource and need to managed appropriately for an application to perform to
		expectations, scale to demand and work reliably! Through configuration it’s possible
		to adjust the connection pool, change default timeout values and enable or disable
		SSL encryption on the client.</shortdesc>
	
<conbody>

	<section>
		<title>Configuring the client</title>
		
		<p>The client comes with a set of default values for it’s configuration. For the most part, these defaults are satisfactory for most development and production use, however, these values can be modified or overridden as needed to tune the client to specific use-cases and scenarios. The client can be configured in one of two ways: programmatically through the <codeph>ClientConfiguration</codeph> object or through the <codeph>App.Config</codeph> or <codeph>Web.Config</codeph>. </p>
		<p><b>The ClientConfiguration Object</b></p>
		<p>The client can be configured programmatically using the <apiname>ClientConfiguration</apiname> class and passing the custom configuration through one of the <apiname>CouchbaseCluster</apiname> constructor overloads. Through the <apiname>ClientConfiguration</apiname> you can also 
			configure individual buckets and their connection pools. </p>
		<p>Here is an example of overriding the default configuration settings with several overrides: </p>
		<p><codeblock outputclass="language-csharp" spectitle="ClientConfiguration Example">
var config = new ClientConfiguration
{
  Servers = new List&lt;Uri&gt;
  {
    new Uri("http://192.168.56.101:8091/pools"),
    new Uri("http://192.168.56.102:8091/pools"),
    new Uri("http://192.168.56.103:8091/pools"),
    new Uri("http://192.168.56.104:8091/pools"),
  },
  UseSsl = true,
  BucketConfigs = new Dictionary&lt;string, BucketConfiguration&gt;
  {
    {"default", new BucketConfiguration
    {
      BucketName = "default",
      UseSsl = false,
      Password = "",
      PoolConfiguration = new PoolConfiguration
      {
        MaxSize = 10,
        MinSize = 5
      }
    }}
  }
};

using (var cluster = new CouchbaseCluster(config))
{
  IBucket bucket = null;
  try
  {
    bucket = cluster.OpenBucket();
    //use the bucket here
  }
  finally
  {
    if (bucket != null)
    {
      cluster.CloseBucket(bucket);
    }
   }
  }
}
		</codeblock></p>
		<p>At the top of the snippet we are creating the <apiname>ClientConfiguration</apiname> object and
				using property initializers to override the default settings. We then are creating
				the bootstrap list of servers for initiating communication between the client and
				the cluster. The client will attempt to bootstrap off of each of these servers, when
				it successfully connect with one of the servers in this list, the bootstrapping
				process will end. </p>
		<p>Why add more than one server to the bootstrap (Servers) list? It’s possible that one or more of the servers in that list may not be part of the cluster at the time the client is created. By providing a range of nodes as bootstrap candidates, the likelihood of client finding a suitable node to connect to increases. Note that once the client successfully  bootstraps, it will receive a server configuration of the current state of the cluster. It will use this server configuration to update the bootstrap list by adding any additional candidate bootstrap servers to it</p>
		<p>Here are all of the <apiname>ClientConfiguration</apiname> members and their defaults:</p>
		<table id="table_ivc_5mc_3p">
			<title>ClientConfiguration Properties</title>
			<tgroup cols="3">
					<colspec colnum="1" colname="col1" colwidth="1*"/>
					<colspec colnum="2" colname="col2" colwidth="3.34*"/>
					<colspec colnum="3" colname="col3" colwidth="1.21*"/>
				<thead>
					<row>
						<entry>Name</entry>
						<entry>Description</entry>
						<entry>Default</entry>
					</row>
				</thead>
				<tbody>
						<row>
							<entry>UseSsl</entry>
							<entry>Whether or not to use SSL encrypt data being sent to and from the
								server</entry>
							<entry>false</entry>
						</row>
						<row>
							<entry>SslPort</entry>
							<entry>Overrides the DirectPort and sets the SSL port to use for
								Key/Value operations using the Binary Memcached protocol id UseSsl
								is enabled</entry>
							<entry>11207</entry>
						</row>
						<row>
							<entry>ApiPort</entry>
							<entry>The port to use for the Views API</entry>
							<entry>8092</entry>
						</row>
						<row>
							<entry>DirectPort</entry>
							<entry>The port to use for standard memcached binary operations e.g.
								storing and retrieving documents by key</entry>
							<entry>11210</entry>
						</row>
						<row>
							<entry>MgmtPort</entry>
							<entry>The port to use for the Management API</entry>
							<entry>8091</entry>
						</row>
						<row>
							<entry>HttpsMgmtPort</entry>
							<entry>Overrides the MgmtPort and sets the SSL port to use for the
								Management API</entry>
							<entry>18091</entry>
						</row>
						<row>
							<entry>HttpsApiPort</entry>
							<entry>Overrides the ApiPort and sets the SSL port to use for the Views
								API</entry>
							<entry>18092</entry>
						</row>
						<row>
							<entry>OperationTimeout</entry>
							<entry>The amount of time the client will wait on a pending operation
								before timing out.</entry>
							<entry>2500ms</entry>
						</row>
						<row>
							<entry>ObserveInterval</entry>
							<entry>The interval to wait before each Observe attempt</entry>
							<entry>10ms</entry>
						</row>
						<row>
							<entry>ObserveTimeout</entry>
							<entry>The max amount of time to wait before timing out</entry>
							<entry>500ms</entry>
						</row>
						<row>
							<entry>Servers</entry>
							<entry>The list of servers to bootstrap from</entry>
							<entry>http://localhost:8091/pools</entry>
						</row>
					</tbody>
				</tgroup>
		</table>
		<p>In the "ClientConfiguration Example" code snippet above, the UseSsl property is set to true,
				indicating that all traffic between the client and the cluster will be encrypted.
				Note that to use this feature, the server hosting the application will need to have
				the appropriate certificate installed and the cluster will have to be Couchbase
				Server version 3.0 or greater. For more detail, please see: [link to installing
				certs].</p>
		<p>In the example above, we are specifying a configuration for the “default” bucket. Providing a
				bucket level configuration will override any configuration settings set at the
				cluster level. The BucketConifguration members and there defaults are as
				follows:</p>
			<p>
				<table id="table_ww5_t4c_3p">
					<title>BucketConfiguraton Properties</title>
					<tgroup cols="3">
						<colspec colnum="1" colname="col1" colwidth="1*"/>
						<colspec colnum="2" colname="col2" colwidth="3.34*"/>
						<colspec colnum="3" colname="col3" colwidth="1.21*"/>
						<thead>
							<row>
								<entry>Name</entry>
								<entry>Description</entry>
								<entry>Default</entry>
							</row>
						</thead>
						<tbody>
							
							<row>
								<entry>BucketName</entry>
								<entry>The name of the bucket to connect to.</entry>
								<entry>“default”</entry>
							</row>
							<row>
								<entry>UseSsl</entry>
								<entry>Whether or not to use SSL encrypt data being
									sent to and from the server</entry>
								<entry>false</entry>
							</row>
							<row>
								<entry>Password</entry>
								<entry>The bucket password</entry>
								<entry>empty string</entry>
							</row>
							<row>
								<entry>ObserveInterval</entry>
								<entry>The interval to wait before each Observe
									attempt</entry>
								<entry>10ms</entry>
							</row>
							<row>
								<entry>ObserverTimeout</entry>
								<entry>The max amount of time to wait before timing
									out</entry>
								<entry>500ms</entry>
							</row>
							<row>
								<entry>PoolConfiguration</entry>
								<entry>The TCP socket pool configuration</entry>
								<entry>(see below)</entry>
							</row>
						</tbody>
					</tgroup>
				</table>
				</p>
		<p>Finally, in the "ClientConfiguration Example" code snippet above, we are providing a new
				PoolConfiguration, which will override the default MaxSize and MinSize of 2 and one
				respectively, with the values 5 and 2. This means that the pool will start with 2
				TCP connections and grow to 5 TCP connections on demand. </p>
		<p>The rest of the PoolConfiguration members and their defaults:
		</p>
			<table id="table_nny_z4c_3p">
				<title>The PoolConfiguration Properties</title>
				<tgroup cols="3">
					<colspec colnum="1" colname="col1"/>
					<colspec colnum="2" colname="col2"/>
					<colspec colnum="3" colname="col3"/>
					<thead>
						<row>
							<entry dir="ltr">Name</entry>
							<entry dir="ltr">Description</entry>
							<entry dir="ltr">Default</entry>
						</row>
					</thead>
					<tbody>
						
						<row>
							<entry dir="ltr">MaxSize</entry>
							<entry dir="ltr">The max number of TCP connection to use</entry>
							<entry dir="ltr">2</entry>
						</row>
						<row>
							<entry dir="ltr">MinSize</entry>
							<entry dir="ltr">The minimum or starting number of TCP
								connections to use</entry>
							<entry dir="ltr">1</entry>
						</row>
						<row>
							<entry dir="ltr">WaitTimeout</entry>
							<entry dir="ltr">The amount of time to wait for a TCP connection
								before timing out once the MaxSize has been reached and all
								connections are being used</entry>
							<entry dir="ltr">2500ms</entry>
						</row>
						<row>
							<entry dir="ltr">ShutdownTimeout</entry>
							<entry dir="ltr">The amount of time to wait for the before the
								underlying socket closes its connection</entry>
							<entry dir="ltr">10000ms</entry>
						</row>
						<row>
							<entry dir="ltr">UseSsl</entry>
							<entry dir="ltr">Whether or not to use SSL encrypt data being
								sent to and from the server</entry>
							<entry dir="ltr">false</entry>
						</row>
					</tbody>
				</tgroup>
			</table>
			<p>The example source can be found on Github <xref
					href="https://github.com/couchbaselabs/couchbase-net-examples/blob/master/Src/Couchbase.ClientConfigurationExample/Program.cs"
					format="html" scope="external">here</xref>.</p>
	</section>
	<section>
		<title>Configuration with an App.Config or Web.Config</title>
		<p>As an alternative to using programmatic configuration, the client can also be configured through an App.config or Web.config. The following snippet illustrates how you would do so:</p>
		<p><codeblock outputclass="language-xml">
&lt;?xml version="1.0" encoding="utf-8" ?&gt;
&lt;configuration&gt;
  &lt;configSections&gt;
    &lt;sectionGroup name="couchbaseClients"&gt;
      &lt;section name="couchbase"
               type="Couchbase.Configuration.Client.Providers.CouchbaseClientSection, Couchbase"/&gt;
    &lt;/sectionGroup&gt;
  &lt;/configSections&gt;
  &lt;couchbaseClients&gt;
    &lt;couchbase useSsl="false"&gt;
      &lt;servers&gt;
        &lt;add uri="http://192.168.56.101:8091/pools"&gt;&lt;/add&gt;
        &lt;add uri="http://192.168.56.102:8091/pools"&gt;&lt;/add&gt;
        &lt;add uri="http://192.168.56.103:8091/pools"&gt;&lt;/add&gt;
        &lt;add uri="http://192.168.56.104:8091/pools"&gt;&lt;/add&gt;
      &lt;/servers&gt;
      &lt;buckets&gt;
        &lt;add name="default" useSsl="false" password=""&gt;
          &lt;connectionPool name="custom" maxSize="10" minSize="5"&gt;&lt;/connectionPool&gt;
        &lt;/add&gt;
      &lt;/buckets&gt;
    &lt;/couchbase&gt;
  &lt;/couchbaseClients&gt;
    &lt;startup&gt; 
        &lt;supportedRuntime version="v4.0" sku=".NETFramework,Version=v4.5.1" /&gt;
    &lt;/startup&gt;
&lt;/configuration&gt;
		</codeblock></p>
		<p>Note this the same configuration programmatically defined earlier in this section using the ClientConfiguration class.</p>
		<p>To use this configuration, you need to use one of the special CouchbaseCluster constructors which takes a string which is the path of the configuration:</p>
		<p>
			<codeblock outputclass="language-csharp">
using (var cluster = new CouchbaseCluster("couchbaseClients/couchbase"))
{
  using (var bucket = cluster.OpenBucket())
  {
    //use the bucket here
  }
}
			</codeblock>
		</p>
		<p>Note that the string “couchbaseClients/couchbase” matches the path of the sectionGroup and
				section elements in the App.config defined above. This example can be found on
				Github <xref
					href="https://github.com/couchbaselabs/couchbase-net-examples/tree/master/Src/Couchbase.ClientConfigurationExample.WebConfig"
					format="html" scope="external">here.</xref>
			</p>
	</section>
	<section>
		<title>Connecting to a Bucket</title>
		<p>Once you have created a ClientConfiguration, you will then connect to a cluster using the CouchbaseCluster class. This is done by creating a CouchbaseCluster object and passing the ClientConfiguration as a parameter.
		</p>
		<p>
			<codeblock outputclass="language-csharp">
  var config = new ClientConfiguration
  {
    Servers = new List&lt;Uri&gt;
    {
      new Uri("http://192.168.56.101:8091/pools"),
      new Uri("http://192.168.56.102:8091/pools"),
      new Uri("http://192.168.56.103:8091/pools"),
      new Uri("http://192.168.56.104:8091/pools"),
    }
  };

  using (var cluster = new CouchbaseCluster(config))
  {
    //open buckets here
  }  
			</codeblock>
		</p>
		<p>Note that the default constructor will internally allocate a ClientConnection internally with the default settings, in other words, creating a ClientConfiguration object is only required when you wish to override the default settings.</p>
		<p>Now that we have CouchbaseCluster, we can connect to a bucket by calling the CouchbaseCluster.OpenBucket() method. The default OpenBucket() method will connect to the default bucket, if you wish to open another bucket, you can use one of the overloads which take a bucket name and password to connect to another bucket. It’s important to note, that you do not need to provide a bucket configuration to open another bucket; if one doesn’t exist, the client will clone one from the default configuration.</p>
		<codeblock outputclass="language-csharp">
  using (var cluster = new CouchbaseCluster(config))
  {
      using (var bucket = cluster.OpenBucket())
      {
          //use bucket here
      }
  }
		</codeblock>
		<p>When you call OpenBucket(), internally the client is using the configuration provided to establish the connection between the client and the server. The references are maintained by the CouchbaseCluster object; it’s the root object and should be long-lived and reused within your application.
		</p>
	</section>
	<section>
		<title>Closing the Connection</title>
		<p>Both CouchbaseCluster and CouchbaseCluster objects implement the IDisposable pattern and also have finalizers. That being said, managing the lifetime of these objects is critical for developing robust, high performance applications. In a typical application, you would create a single, static CouchbaseCluster object that would live the duration of the application or process’s lifetime - create the CouchbaseCluster object when the application starts and call it’s Dispose method when the application shuts down. Depending upon finalization is not suggested, but admissible in certain applications.
		</p>
		<p>There are three ways to close a bucket and release the internal connections:
		</p>
		<ol>
			<li>Through Finalization and Garbage Collection (GC)</li>
			<li>Calling Dispose explicitly or implicitly via the using statement</li>
			<li>By calling CouchbaseCluster.CloseBucket() and passing the bucket reference</li>
		</ol>
		<p>
			The first way is the least dependable method and relies on a certain amount of non-determinism as you are relying on the CLR’s finalization mechanism; just let the object go out of scope. The second and third are the preferred methods in that you deterministically control the object's lifetime. Here is an example of using the third method:
		</p>
		<codeblock outputclass="language-csharp">
  using (var cluster = new CouchbaseCluster(config))
  {
      IBucket bucket = null;
      try
      {
          bucket = cluster.OpenBucket();
          //use the bucket here
      }
      finally
      {
          if (bucket != null)
          {
              cluster.CloseBucket(bucket);
          }
      }
  }
		</codeblock>
		<note>It’s important to note that the references to the <apiname>CouchbaseBucket</apiname> (or <apiname>MemcachedBucket</apiname>) are ref-counted; multiple threads maybe using the same object. If multiple threads are using the bucket and each calls either <apiname>CouchbaseCluster.CloseBucket()</apiname> or <apiname>Dispose()</apiname> (either implicitly through the using statement explicitly), the instance will not be disposed until the ref-count reaches zero.</note>
	</section>
	<section><title>Configuring SSL</title><p>One of the core features of Couchbase Server 3.0 is
				support for encryption of data over the wire between the client and the cluster.
				This is done through Secure Socket Layer (SSL) encryption. </p><p>To use SSL, there
				are two steps: </p><ol>
				<li>Install a certificate provided by Couchbase the server on your application
					server</li>
				<li>Open a browser and navigate to the Couchbase Administration Console of the
					cluster your client will be connecting to. Navigate to the Settings tab and
					click the “Show” certificate to expose the certificate.</li>
			</ol>
			<p><image href="../images/couchbase-ssl.png" id="image_r1q_vgd_3p"/></p>
			<p>Copy the entire contents of the certificate and store it in a file with a .crt
				extension on the application server you wish to install the certificate. </p>
			<p> Once you have the certificate on the application server, you need to import it into
				the local computer certificate store. On Windows, you can do this by using the
				certificate MMC snap-in: certlm. </p>
			<p><image href="../images/installing-cert.png" id="image_yfd_1hd_3p"/></p>
		    <p>Right click on
			the “Certificates” menu item and then “Import” on the Trusted Root Certification
			Authorities root node. Follow the wizard to import the certificate you stored on disk
			above.</p>
		<note spectitle="Configuring the Client">
			Once you have the certificate installed on your application, to enable the SSL on the client either set the UseSsl property on the ClientConfiguration or BucketConfiguration to true. Alternatively, you can set the useSsl property within your Web.Config or App.Config if you are not programmatically doing your configuration.</note>
	</section>
</conbody>
 
</concept>
