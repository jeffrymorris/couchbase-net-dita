<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE concept
  PUBLIC "-//OASIS//DTD DITA Concept//EN" "concept.dtd">
<concept xml:lang="en-us" id="concept553">
	<title>Adding the Client to an Application</title>
	<conbody>
		<p>There are three ways of using the Couchbase .NET SDK in your code:
		</p>
		<p><ol>
			<li>Using a package manager (Nuget)</li>
			<li>Downloading and referencing the binaries</li>
			<li>Building the source yourself</li>
		</ol></p>
		<p>The following sections explains in detail, how to get started using each of the three methods defined above.</p>
		<section>
			<title>Nuget</title>
			<p>For every release, we package the binaries and store the latest version in Nuget. If you are not familiar with Nuget, it’s the official and most widely supported package manager for Microsoft Visual Studio and .NET in general. Nuget.org is a centralized repository for package authors and consumers, it also defines a suite of tools for authoring and consuming packages.</p>
			<p>Assuming you are using Visual Studio 2010 or greater, getting started with the Couchbase .NET SDK and Nuget is easy:
			</p>
			<p>
				<ol>
					<li>From your IDE, simply right click on the project you wish to add the dependency to and in the context menu click “Manage Nuget Packages...”
					</li>
					<li>The Nuget package manager modal dialog will open</li>
					<li>On the Tree View menu on the left, select “Online” and then “nuget.org”</li>
					<li>Now, in the search box at the top right hand side of the dialog, type “CouchbaseNetClient” and then hit “enter” on your keyboard</li>
					<li>In the search results select the “CouchbaseNetClient” result and then “Install”
					</li>
				</ol>
			</p>
			<p>That’s it! Nuget will pull in all required dependencies and reference them. You're ready to start coding!</p>
			<note>
				<p>There is one alternative way to use Nuget to include the Couchbase .NET SDK
					binaries in your .NET projects: the Package Manager Console. The main advantage
					of using the Package Manager Console, is that the Nuget Dialog by default always
					installs the latest version of the package published to Nuget.org, however the
					console allows you to define the version of the package you wish to include. For
					users targeting older builds of the SDK, this may be the best alternative.
				</p>
				<p>To use the Package Manager Console to include the SDK in your project, do the following: </p>
				<p>
					<ol>
						<li>Click on tools from the menu bar in Visual Studio</li>
						<li>Select “Nuget Package Manager” and then “Package Manager Console”</li>
						<li>In the console type: Install-Package CouchbaseNetClient </li>
						<li>For a specific version, use the -version flag followed by the version
							you wish to install: Install-Package CouchbaseNetClient -Version
							1.3.7</li>
					</ol>
				</p>
			</note>
		</section>
		<section>
			<title>Downloading the and Referencing the Binaries</title>
			<p>If you do not want to use Nuget, which is the preferred method, to include the Couchbase .NET SDK in your project, you can download and reference the binaries directly. Note that if you chose this route, you’ll also be responsible for including and resolving in dependencies used internally by the SDK.</p>
			<p>To download and reference the binaries directly, follow the following steps:</p>
			<p><ol>
					<li>Locate the links to the version of the SDK you wish to install. The binaries are stored in S3 and the links are available from the [downloads page].</li>
					<li>Once you have downloaded the binaries, in Visual Studio right click on the project you wish to include the SDK and then “Add”</li>
					<li>Click the “Reference” item to open the Reference Manager</li>
					<li>Select “Browse” on the left and find the binaries you downloaded in step one</li>
					<li>Select them and then “Ok”</li>
				</ol>
			</p>
			<p>After you have referenced the Couchbase .NET SDK binaries, you’ll have to locate and reference the dependencies it uses in a similar fashion. As of the time or this writing, the dependencies are as follows:
			</p>
			<p>
				<ul>
					<li>Apache Common Infrastructure Libraries for .NET v2.0.0: <xref
							href="http://www.apache.org/licenses/LICENSE-2.0" format="html"
							scope="external"
						>http://netcommon.sourceforge.net/downloads.html</xref></li>
					<li>Json.NET v6.0.1: <xref href="https://json.codeplex.com/releases/view/126052" format="html"
							scope="external"
						>https://json.codeplex.com/releases/view/126052</xref></li>
				</ul>
			</p>
			<p>Other versions may or may not be compatible with the current SDK version.
			</p>
		</section>
		<section>
			<title>Building the Source</title>
			<p>If none of the other installation options suffice or if you want to debug the source or perhaps contribute, building directly from the source is the best option for you. All source is located on Github here.</p>
			<note>
				<p>Please note that what is included in Nuget and S3 are the “official” releases which have been through a rigorous testing process. What is on Github and not tagged as an official release should be considered “in development”.</p></note>
			<p>Steps to build from source:
			</p>
			<p><ol>
				<li>Optionally fork the repository: https://github.com/couchbase/couchbase-net-client/fork</li>
				<li>Using a Git console, clone the repository: git clone git@github.com:couchbase/couchbase-net-client.git</li>
				<li>Pull the latest: git pull origin master</li>
				<li>Navigate to the directory that the source was cloned to and open the solution. </li>
				<li>Build the solution</li>
			</ol></p>
			<p>Once you have successfully built the source, it’s then just a matter of referencing the binaries (.DLLs) from your consuming project.</p>
		</section>
	</conbody>
</concept>
